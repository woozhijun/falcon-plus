// Code generated by protoc-gen-go. DO NOT EDIT.
// source: argus-data.proto

package com_mobike_apm_argus

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type MeterType int32

const (
	MeterType_GUAGE     MeterType = 0
	MeterType_COUNTER   MeterType = 1
	MeterType_HISTOGRAM MeterType = 2
)

var MeterType_name = map[int32]string{
	0: "GUAGE",
	1: "COUNTER",
	2: "HISTOGRAM",
}

var MeterType_value = map[string]int32{
	"GUAGE":     0,
	"COUNTER":   1,
	"HISTOGRAM": 2,
}

func (x MeterType) String() string {
	return proto.EnumName(MeterType_name, int32(x))
}

func (MeterType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_dc0570f8e63c7797, []int{0}
}

type MetricType int32

const (
	MetricType_SYS          MetricType = 0
	MetricType_BUSINESS     MetricType = 1
	MetricType_KAFKA        MetricType = 2
	MetricType_ROCKETMQ     MetricType = 3
	MetricType_CACHE        MetricType = 4
	MetricType_JVM          MetricType = 5
	MetricType_NGINX        MetricType = 6
	MetricType_MYSQL        MetricType = 7
	MetricType_CODIS        MetricType = 8
	MetricType_TIDB         MetricType = 9
	MetricType_HBASE        MetricType = 10
	MetricType_INFLUX       MetricType = 11
	MetricType_NETWORK      MetricType = 12
	MetricType_MICROSERVICE MetricType = 13
)

var MetricType_name = map[int32]string{
	0:  "SYS",
	1:  "BUSINESS",
	2:  "KAFKA",
	3:  "ROCKETMQ",
	4:  "CACHE",
	5:  "JVM",
	6:  "NGINX",
	7:  "MYSQL",
	8:  "CODIS",
	9:  "TIDB",
	10: "HBASE",
	11: "INFLUX",
	12: "NETWORK",
	13: "MICROSERVICE",
}

var MetricType_value = map[string]int32{
	"SYS":          0,
	"BUSINESS":     1,
	"KAFKA":        2,
	"ROCKETMQ":     3,
	"CACHE":        4,
	"JVM":          5,
	"NGINX":        6,
	"MYSQL":        7,
	"CODIS":        8,
	"TIDB":         9,
	"HBASE":        10,
	"INFLUX":       11,
	"NETWORK":      12,
	"MICROSERVICE": 13,
}

func (x MetricType) String() string {
	return proto.EnumName(MetricType_name, int32(x))
}

func (MetricType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_dc0570f8e63c7797, []int{1}
}

type Metric struct {
	Group                string             `protobuf:"bytes,1,opt,name=group,proto3" json:"group,omitempty"`
	App                  string             `protobuf:"bytes,2,opt,name=app,proto3" json:"app,omitempty"`
	Type                 string             `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	Metrics              map[string]float64 `protobuf:"bytes,4,rep,name=metrics,proto3" json:"metrics,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
	Tags                 map[string]string  `protobuf:"bytes,5,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Timestamp            int64              `protobuf:"varint,6,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Step                 int32              `protobuf:"varint,7,opt,name=step,proto3" json:"step,omitempty"`
	MeterType            string             `protobuf:"bytes,8,opt,name=meterType,proto3" json:"meterType,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *Metric) Reset()         { *m = Metric{} }
func (m *Metric) String() string { return proto.CompactTextString(m) }
func (*Metric) ProtoMessage()    {}
func (*Metric) Descriptor() ([]byte, []int) {
	return fileDescriptor_dc0570f8e63c7797, []int{0}
}

func (m *Metric) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Metric.Unmarshal(m, b)
}
func (m *Metric) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Metric.Marshal(b, m, deterministic)
}
func (m *Metric) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Metric.Merge(m, src)
}
func (m *Metric) XXX_Size() int {
	return xxx_messageInfo_Metric.Size(m)
}
func (m *Metric) XXX_DiscardUnknown() {
	xxx_messageInfo_Metric.DiscardUnknown(m)
}

var xxx_messageInfo_Metric proto.InternalMessageInfo

func (m *Metric) GetGroup() string {
	if m != nil {
		return m.Group
	}
	return ""
}

func (m *Metric) GetApp() string {
	if m != nil {
		return m.App
	}
	return ""
}

func (m *Metric) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Metric) GetMetrics() map[string]float64 {
	if m != nil {
		return m.Metrics
	}
	return nil
}

func (m *Metric) GetTags() map[string]string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *Metric) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *Metric) GetStep() int32 {
	if m != nil {
		return m.Step
	}
	return 0
}

func (m *Metric) GetMeterType() string {
	if m != nil {
		return m.MeterType
	}
	return ""
}

type Empty struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Empty) Reset()         { *m = Empty{} }
func (m *Empty) String() string { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()    {}
func (*Empty) Descriptor() ([]byte, []int) {
	return fileDescriptor_dc0570f8e63c7797, []int{1}
}

func (m *Empty) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Empty.Unmarshal(m, b)
}
func (m *Empty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Empty.Marshal(b, m, deterministic)
}
func (m *Empty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Empty.Merge(m, src)
}
func (m *Empty) XXX_Size() int {
	return xxx_messageInfo_Empty.Size(m)
}
func (m *Empty) XXX_DiscardUnknown() {
	xxx_messageInfo_Empty.DiscardUnknown(m)
}

var xxx_messageInfo_Empty proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("com.mobike.apm.argus.MeterType", MeterType_name, MeterType_value)
	proto.RegisterEnum("com.mobike.apm.argus.MetricType", MetricType_name, MetricType_value)
	proto.RegisterType((*Metric)(nil), "com.mobike.apm.argus.Metric")
	proto.RegisterMapType((map[string]float64)(nil), "com.mobike.apm.argus.Metric.MetricsEntry")
	proto.RegisterMapType((map[string]string)(nil), "com.mobike.apm.argus.Metric.TagsEntry")
	proto.RegisterType((*Empty)(nil), "com.mobike.apm.argus.Empty")
}

func init() { proto.RegisterFile("argus-data.proto", fileDescriptor_dc0570f8e63c7797) }

var fileDescriptor_dc0570f8e63c7797 = []byte{
	// 502 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x53, 0x41, 0x6f, 0xda, 0x30,
	0x18, 0xad, 0x09, 0x49, 0xc8, 0x57, 0x2a, 0x59, 0x16, 0x9a, 0x22, 0xd6, 0x03, 0xea, 0x61, 0x62,
	0x95, 0x96, 0x03, 0x3b, 0x6c, 0xe2, 0x16, 0x52, 0x17, 0x32, 0x9a, 0x64, 0xb5, 0x43, 0xd7, 0x1e,
	0x53, 0x66, 0x21, 0xd4, 0x85, 0x44, 0x89, 0xa9, 0xc4, 0x5f, 0xd8, 0x2f, 0xd9, 0x75, 0xff, 0x70,
	0xb2, 0x43, 0x57, 0x0e, 0x55, 0x77, 0xd8, 0x29, 0x9f, 0xdf, 0xf3, 0x7b, 0x7e, 0x7e, 0x8a, 0x01,
	0x67, 0xd5, 0x6a, 0x5b, 0x7f, 0xf8, 0x9e, 0xc9, 0xcc, 0x2b, 0xab, 0x42, 0x16, 0xa4, 0xb7, 0x2c,
	0x72, 0x2f, 0x2f, 0xee, 0xd7, 0x0f, 0xc2, 0xcb, 0xca, 0xdc, 0xd3, 0x1b, 0xce, 0x7e, 0x1a, 0x60,
	0x45, 0x42, 0x56, 0xeb, 0x25, 0xe9, 0x81, 0xb9, 0xaa, 0x8a, 0x6d, 0xe9, 0xa2, 0x01, 0x1a, 0x3a,
	0xac, 0x59, 0x10, 0x0c, 0x46, 0x56, 0x96, 0x6e, 0x4b, 0x63, 0x6a, 0x24, 0x04, 0xda, 0x72, 0x57,
	0x0a, 0xd7, 0xd0, 0x90, 0x9e, 0x49, 0x00, 0x76, 0xae, 0x5d, 0x6a, 0xb7, 0x3d, 0x30, 0x86, 0xc7,
	0xa3, 0xf7, 0xde, 0x4b, 0xc7, 0x79, 0xcd, 0x51, 0xfb, 0x4f, 0x4d, 0x37, 0xb2, 0xda, 0xb1, 0x27,
	0x25, 0x19, 0x43, 0x5b, 0x66, 0xab, 0xda, 0x35, 0xb5, 0xc3, 0xbb, 0x57, 0x1d, 0xd2, 0x6c, 0xb5,
	0x97, 0x6b, 0x0d, 0x39, 0x05, 0x47, 0xae, 0x73, 0x51, 0xcb, 0x2c, 0x2f, 0x5d, 0x6b, 0x80, 0x86,
	0x06, 0x7b, 0x06, 0x54, 0xe4, 0x5a, 0x8a, 0xd2, 0xb5, 0x07, 0x68, 0x68, 0x32, 0x3d, 0x2b, 0x45,
	0x2e, 0xa4, 0xa8, 0x52, 0x75, 0x97, 0x8e, 0xbe, 0xcb, 0x33, 0xd0, 0x1f, 0x43, 0xf7, 0x30, 0xa4,
	0xaa, 0xe1, 0x41, 0xec, 0xf6, 0xd5, 0xa8, 0x51, 0xd5, 0xf5, 0x98, 0xfd, 0xd8, 0x0a, 0x5d, 0x0d,
	0x62, 0xcd, 0x62, 0xdc, 0xfa, 0x8c, 0xfa, 0x9f, 0xc0, 0xf9, 0x1b, 0xef, 0x5f, 0x42, 0xe7, 0x40,
	0x78, 0x66, 0x83, 0x49, 0xf3, 0x52, 0xee, 0xce, 0x47, 0xe0, 0x44, 0x4f, 0x51, 0x88, 0x03, 0xe6,
	0x74, 0xe1, 0x4f, 0x29, 0x3e, 0x22, 0xc7, 0x60, 0x07, 0xc9, 0x22, 0x4e, 0x29, 0xc3, 0x88, 0x9c,
	0x80, 0x33, 0x0b, 0x79, 0x9a, 0x4c, 0x99, 0x1f, 0xe1, 0xd6, 0xf9, 0x6f, 0x04, 0xd0, 0x44, 0xd6,
	0x2a, 0x1b, 0x0c, 0x7e, 0xc7, 0xf1, 0x11, 0xe9, 0x42, 0x67, 0xb2, 0xe0, 0x61, 0x4c, 0x39, 0xc7,
	0x48, 0x99, 0xcd, 0xfd, 0xcb, 0xb9, 0x8f, 0x5b, 0x8a, 0x60, 0x49, 0x30, 0xa7, 0x69, 0x74, 0x8d,
	0x0d, 0x45, 0x04, 0x7e, 0x30, 0xa3, 0xb8, 0xad, 0xa4, 0x5f, 0x6e, 0x22, 0x6c, 0x2a, 0x2c, 0x9e,
	0x86, 0xf1, 0x2d, 0xb6, 0xd4, 0x18, 0xdd, 0xf1, 0xeb, 0x2b, 0x6c, 0xeb, 0x9d, 0xc9, 0x45, 0xc8,
	0x71, 0x87, 0x74, 0xa0, 0x9d, 0x86, 0x17, 0x13, 0xec, 0x28, 0x70, 0x36, 0xf1, 0x39, 0xc5, 0x40,
	0x00, 0xac, 0x30, 0xbe, 0xbc, 0x5a, 0xdc, 0xe2, 0x63, 0x15, 0x38, 0xa6, 0xe9, 0xb7, 0x84, 0xcd,
	0x71, 0x97, 0x60, 0xe8, 0x46, 0x61, 0xc0, 0x12, 0x4e, 0xd9, 0x4d, 0x18, 0x50, 0x7c, 0x32, 0xfa,
	0x85, 0xe0, 0x4d, 0x93, 0x99, 0x89, 0xb2, 0xa8, 0xe4, 0x7a, 0xb3, 0xe2, 0xa2, 0x7a, 0x5c, 0x2f,
	0x05, 0xa1, 0x60, 0x55, 0x1a, 0x23, 0xa7, 0xaf, 0xfd, 0x08, 0xfd, 0xb7, 0x2f, 0xb3, 0xba, 0xc7,
	0x21, 0x22, 0x53, 0x80, 0xc6, 0x26, 0xd9, 0x2c, 0xc5, 0x7f, 0x58, 0x4d, 0x7a, 0x80, 0x0f, 0x59,
	0xc5, 0x7c, 0x45, 0xf7, 0x96, 0x7e, 0x5b, 0x1f, 0xff, 0x04, 0x00, 0x00, 0xff, 0xff, 0x4d, 0x60,
	0xb3, 0xc3, 0x6f, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MetricReportingServiceClient is the client API for MetricReportingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MetricReportingServiceClient interface {
	Report(ctx context.Context, opts ...grpc.CallOption) (MetricReportingService_ReportClient, error)
	ReportOnce(ctx context.Context, in *Metric, opts ...grpc.CallOption) (*Empty, error)
}

type metricReportingServiceClient struct {
	cc *grpc.ClientConn
}

func NewMetricReportingServiceClient(cc *grpc.ClientConn) MetricReportingServiceClient {
	return &metricReportingServiceClient{cc}
}

func (c *metricReportingServiceClient) Report(ctx context.Context, opts ...grpc.CallOption) (MetricReportingService_ReportClient, error) {
	stream, err := c.cc.NewStream(ctx, &_MetricReportingService_serviceDesc.Streams[0], "/com.mobike.apm.argus.MetricReportingService/report", opts...)
	if err != nil {
		return nil, err
	}
	x := &metricReportingServiceReportClient{stream}
	return x, nil
}

type MetricReportingService_ReportClient interface {
	Send(*Metric) error
	CloseAndRecv() (*Empty, error)
	grpc.ClientStream
}

type metricReportingServiceReportClient struct {
	grpc.ClientStream
}

func (x *metricReportingServiceReportClient) Send(m *Metric) error {
	return x.ClientStream.SendMsg(m)
}

func (x *metricReportingServiceReportClient) CloseAndRecv() (*Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *metricReportingServiceClient) ReportOnce(ctx context.Context, in *Metric, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/com.mobike.apm.argus.MetricReportingService/reportOnce", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MetricReportingServiceServer is the server API for MetricReportingService service.
type MetricReportingServiceServer interface {
	Report(MetricReportingService_ReportServer) error
	ReportOnce(context.Context, *Metric) (*Empty, error)
}

func RegisterMetricReportingServiceServer(s *grpc.Server, srv MetricReportingServiceServer) {
	s.RegisterService(&_MetricReportingService_serviceDesc, srv)
}

func _MetricReportingService_Report_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MetricReportingServiceServer).Report(&metricReportingServiceReportServer{stream})
}

type MetricReportingService_ReportServer interface {
	SendAndClose(*Empty) error
	Recv() (*Metric, error)
	grpc.ServerStream
}

type metricReportingServiceReportServer struct {
	grpc.ServerStream
}

func (x *metricReportingServiceReportServer) SendAndClose(m *Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *metricReportingServiceReportServer) Recv() (*Metric, error) {
	m := new(Metric)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _MetricReportingService_ReportOnce_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Metric)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricReportingServiceServer).ReportOnce(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.mobike.apm.argus.MetricReportingService/ReportOnce",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricReportingServiceServer).ReportOnce(ctx, req.(*Metric))
	}
	return interceptor(ctx, in, info, handler)
}

var _MetricReportingService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "com.mobike.apm.argus.MetricReportingService",
	HandlerType: (*MetricReportingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "reportOnce",
			Handler:    _MetricReportingService_ReportOnce_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "report",
			Handler:       _MetricReportingService_Report_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "argus-data.proto",
}
